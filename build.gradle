import compiler.NativeImageTask

plugins {
  id 'compiler.native-image'
  id 'compiler.scala-cli'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'com.palantir.git-version' version '1.0.0'
}

apply plugin: 'scala'
apply plugin: 'application'

repositories {
    flatDir {
        dirs 'lib'
    }
    mavenCentral()
    maven {
        url 'https://mvnrepository.com/artifact'
    }
}

ext {
    scala_maj = '3'
    scala_ver = "${scala_maj}.7.1"

    pekko_core = '1.1.4'
    pekko_http = '1.2.0'
    scala_test = '3.2.9'
}

dependencies {
    implementation group: 'org.scala-lang' , name: "scala${scala_maj}-library_${scala_maj}"  , version: scala_ver
    implementation group: 'org.scala-lang' , name: "scala${scala_maj}-compiler_${scala_maj}" , version: scala_ver

    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.17'

    implementation group: 'org.apache.pekko', name: "pekko-actor-typed_${scala_maj}", version: pekko_core
    implementation group: 'org.apache.pekko', name: "pekko-stream_${scala_maj}", version: pekko_core
    implementation group: 'org.apache.pekko', name: "pekko-http_${scala_maj}", version: pekko_http
    implementation group: 'org.apache.pekko', name: "pekko-http-spray-json_${scala_maj}", version: pekko_http

    implementation group: 'org.scala-lang.modules', name: "scala-xml_${scala_maj}", version: '2.3.0'

    testImplementation group: 'org.scalatest', name: "scalatest_${scala_maj}", version: scala_test
    testImplementation group: 'org.scalactic', name: "scalactic_${scala_maj}", version: scala_test

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.scalatestplus', name: "junit-4-13_${scala_maj}", version: "${scala_test}.0"
}

version gitVersion()

application {
    mainClass.set('app.Tablo2HDHomeRun')
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
                exclude '**/*.sample'
        }
    }
}

task repl(type:JavaExec) {
    mainClass = 'scala.tools.nsc.MainGenericRunner'
    classpath = sourceSets.main.runtimeClasspath
    standardInput System.in
    args '-usejavacp'
}

shadowJar {
    archiveClassifier = ''
    manifest {
        attributes 'App-Version': gitVersion()
    }
    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources", "src/main/app"
            }
        }
    }
    append('reference.conf')
}

nativeImage {
    dependsOn shadowJar

    minHeap 128
    maxHeap 128
    maxNew 64

    parameters = [
      NativeImageTask.Option.STATIC
    , NativeImageTask.Option.MUSL
    , NativeImageTask.Option.CPU
    ]
}

scalaCli {
    dependsOn clean

    minHeap 1
    maxHeap 8
}

compileScala {
    scalaCompileOptions.deprecation = true
    scalaCompileOptions.additionalParameters = [
        '-feature'
      , '-no-indent'
      , '-explain'
      , '-language:noAutoTupling'
//      , '-language:strictEquality'
      , '-Werror'
      , '-Wnonunit-statement'
      , '-Wsafe-init'
      , '-Wunused:all'
      , '-Wvalue-discard'
//      , '-Yexplicit-nulls'
    ]
}
